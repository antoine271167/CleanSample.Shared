parameters:
- name: azureSubscription
  type: string
- name: resourceGroupName 
  type: string
- name: storageAccountName
  type: string
- name: cdnEndPointName
  type: string
- name: cdnProfileName
  type: string
- name: applicationName
  type: string

steps:
  # Enable static site hosting for this account
  # Your storage account will now have a blob container named $web.
  # That contents of that container will be available on the URL accountname.z21.web.core.windows.net/.
  # For example, https://myaccount.z21.web.core.windows.net/.
- template: storage-account-get-connectionstring-task.yml
  parameters:
    azureSubscription: ${{parameters.azureSubscription}}
    resourceGroupName: ${{parameters.resourceGroupName}}
    storageAccountName: ${{parameters.storageAccountName}}
- task: AzureCLI@2
  displayName: Enable Static Site Hosting
  inputs:
    azureSubscription: ${{parameters.azureSubscription}}
    scriptType: bash
    scriptLocation: inlineScript
    addSpnToEnvironment: true
    inlineScript: |
      az storage blob service-properties update \
        --connection-string '$(eventQueueStorageConnectionString)' \
        --static-website --404-document 404.html \
        --index-document index.html
- task: AzureCLI@2
  displayName: Create a CDN Profile
  inputs:
    azureSubscription: ${{parameters.azureSubscription}}
    scriptType: bash
    scriptLocation: inlineScript
    addSpnToEnvironment: true
    inlineScript: |
      az cdn profile create \
        --resource-group ${{parameters.resourceGroupName}} \
        --name ${{parameters.cdnProfileName}} \
        --sku Standard_Microsoft
- task: AzureCLI@2
  displayName: Create a CDN Endpoint
  inputs:
    azureSubscription: ${{parameters.azureSubscription}}
    scriptType: bash
    scriptLocation: inlineScript
    addSpnToEnvironment: true
    inlineScript: |
      az cdn endpoint create \
        --resource-group ${{parameters.resourceGroupName}} \
        --name ${{parameters.cdnEndPointName}} \
        --profile-name ${{parameters.cdnProfileName}} \
        --origin ${{parameters.storageAccountName}}.z6.web.core.windows.net \
        --origin-host-header ${{parameters.storageAccountName}}.z6.web.core.windows.net \
        --enable-compression
- task: AzureCLI@2
  displayName: Create Custom Domain
  inputs:
    azureSubscription: ${{parameters.azureSubscription}}
    scriptType: bash
    scriptLocation: inlineScript
    addSpnToEnvironment: true
    inlineScript: |
      az cdn custom-domain create \
        --resource-group ${{parameters.resourceGroupName}} \
        --endpoint-name ${{parameters.cdnEndPointName}} \
        --profile-name ${{parameters.cdnProfileName}} \
        --name ${{parameters.applicationName}}web-domain \
        --hostname ${{parameters.applicationName}}.fiberwolf.net
- task: AzureCLI@2
  displayName: Enable HTTPS
  inputs:
    azureSubscription: ${{parameters.azureSubscription}}
    scriptType: bash
    scriptLocation: inlineScript
    addSpnToEnvironment: true
    inlineScript: |
      az cdn custom-domain enable-https \
        --resource-group ${{parameters.resourceGroupName}} \
        --endpoint-name ${{parameters.cdnEndPointName}} \
        --profile-name ${{parameters.cdnProfileName}} \
        --name ${{parameters.applicationName}}web-domain
- task: AzureCLI@2
  displayName: Rule to redirect any HTTP requests to HTTPS
  inputs:
    azureSubscription: ${{parameters.azureSubscription}}
    scriptType: bash
    scriptLocation: inlineScript
    addSpnToEnvironment: true
    inlineScript: |
      az cdn endpoint rule add \
        -n ${{parameters.cdnEndPointName}} \
        --profile-name ${{parameters.cdnProfileName}} \
        --rule-name enforcehttps \
        --order 1 \
        --action-name "UrlRedirect" \
        --redirect-type Found \
        --redirect-protocol HTTPS \
        --match-variable RequestScheme \
        --operator Equal \
        --match-value HTTP
# if you’re deploying a Single Page Application (SPA) built in your favourite JavaScript framework
# (e.g. Vue, React, Angular), you will want a URL Rewrite rule that returns the app’s root index.html
# file for any request to a path that isn’t an actual file. There are many variations on how to write
# this rule. I found this to be the simplest one that worked for me. Basically if the request path is
# not for a specific file with a file extension, rewrite to index.html. This allows users to directly
# navigate to a route in my SPA and still have the CDN serve the index.html that bootstraps the application.
- task: AzureCLI@2
  displayName: Returns the apps root index.html file for any request to a path that isnt an actual file
  inputs:
    azureSubscription: ${{parameters.azureSubscription}}
    scriptType: bash
    scriptLocation: inlineScript
    addSpnToEnvironment: true
    inlineScript: |
      az cdn endpoint rule add \
        -n ${{parameters.cdnEndPointName}} \
        --profile-name ${{parameters.cdnProfileName}} \
        --rule-name sparewrite \
        --order 2 \
        --action-name "UrlRewrite" \
        --source-pattern '/' \
        --destination /index.html \
        --preserve-unmatched-path false \
        --match-variable UrlFileExtension \
        --operator LessThan \
        --match-value