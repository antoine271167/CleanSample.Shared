parameters:
- name: azureSubscription
  type: string
- name: appName
  type: string    
- name: createClientSecret
  type: boolean
  default: false
- name: appRoles
  type: object
  default: {}

steps:
- task: AzureCLI@2
  name: CreateAppRegistration
  displayName: 'Create App Registration'
  inputs:
    azureSubscription: ${{parameters.azureSubscription}}
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: |
      $appRegName = '${{parameters.appName}}-appreg'

      Write-Host 'Creating app registration' $appRegName
      $appReg = (az ad app create --display-name "$appRegName" --output json) | ConvertFrom-Json

      $clientId = $appReg.appId
      $objectId = $appReg.id

      $principals = az ad sp list | ConvertFrom-Json | Where-Object {$_.appId -eq $clientId}
      if(-not $principals) {
        Write-Host 'Creating service principal'
        az ad sp create --id "$objectId"
      }

      Write-Host "##vso[task.setvariable variable=clientId;isSecret=false]$($clientId)"

      $createClientSecret =  $${{parameters.createClientSecret}}
      if($true -eq $createClientSecret)
      {
          $description = "created by script"
          $credentials = (az ad app credential list --id $clientId) | ConvertFrom-Json | Where-Object {$_.displayName -eq $description}
          if($credentials) {
            Write-Host 'Deleting old client secrets'
            $credentials | foreach {az ad app credential delete --id $clientId --key-id $($_.keyId)}
          }

          Write-Host 'Creating client secret'
          $secret = (az ad app credential reset --id $clientId --display-name $description --append) | ConvertFrom-Json

          $clientSecret =  $secret.password

          Write-Host "##vso[task.setvariable variable=clientSecret;isSecret=false]$($clientSecret)"
      }

- ${{ each appRole in parameters.appRoles }}:
  - task: AzureCLI@2
    displayName: 'Create App Role ${{appRole}}'
    inputs:
      azureSubscription: ${{parameters.azureSubscription}}
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $allAppRoles = @()
        az ad app list | ConvertFrom-Json | Where-Object {$_.appId -eq "$(clientId)"} | foreach {$_.appRoles} | foreach {$allAppRoles += $_}
        $hasAppRole = $allAppRoles | Where-Object {$_.value -eq "${{appRole}}"}
        if(-not $hasAppRole) {
          $newAppRole = @{
            allowedMemberTypes = @("User", "Application")
            displayName = "${{appRole}}"
            isEnabled = $true
            description = "${{appRole}}"
            value = "${{appRole}}"
          }

          $allAppRoles += $newAppRole
          $allAppRoles | ConvertTo-Json -AsArray -Compress | Out-File "./tmp.json"
          az ad app update --id "$(clientId)" --app-roles "@tmp.json"
        }
